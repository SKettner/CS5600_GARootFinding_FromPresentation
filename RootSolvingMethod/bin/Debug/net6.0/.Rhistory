newton_results$method <- "Newton"
ga_results$method <- "Genetic Algorithm"
bisection_results$method <- "Bisection"
# Combine all results into one dataframe
all_results <- bind_rows(newton_results, ga_results, bisection_results)
# Ensure `function` column is consistent
colnames(expected_roots)[colnames(expected_roots) == "function"] <- "function"
colnames(all_results)[colnames(all_results) == "function"] <- "function"
# Merge with expected roots
comparison <- merge(all_results, expected_roots, by = "function", all.x = TRUE)
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Read in the CSV files
ga_data <- read_csv("ga_results.csv")            # columns: function, root, iterations, time_ms
bisection_data <- read_csv("bisection_results.csv")
newton_data <- read_csv("newton_results.csv")
# Read the expected roots file
expected <- read_csv("expected_roots.csv")       # columns: function, expected_root
# Add a method column to each dataset
ga_data <- ga_data %>% mutate(Method = "GA")
bisection_data <- bisection_data %>% mutate(Method = "Bisection")
newton_data <- newton_data %>% mutate(Method = "Newton-Raphson")
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Read in the CSV files
ga_data <- read_csv("ga_results.csv")            # columns: function, root, iterations, time_ms
bisection_data <- read_csv("bisection_results.csv")
newton_data <- read_csv("newton_results.csv")
# Read the expected roots file
expected <- read_csv("expected_roots.csv")       # columns: function, expected_root
# Add a method column to each dataset
ga_data <- ga_data %>% mutate(Method = "GA")
bisection_data <- bisection_data %>% mutate(Method = "Bisection")
newton_data <- newton_data %>% mutate(Method = "Newton-Raphson")
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Read in the CSV files
ga_data <- read_csv("ga_results.csv")            # columns: function, root, iterations, time_ms
bisection_data <- read_csv("bisection_results.csv")
newton_data <- read_csv("newton_results.csv")
# Read the expected roots file
expected <- read_csv("expected_roots.csv")       # columns: function, expected_root
# Add a method column to each dataset
ga_data <- ga_data %>% mutate(Method = "GA")
bisection_data <- bisection_data %>% mutate(Method = "Bisection")
# Handle `-∞` in the newton_data root column
newton_data <- newton_data %>%
mutate(root = ifelse(root == "-∞", -Inf, as.numeric(root))) %>%
mutate(Method = "Newton-Raphson")
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
# Join with the expected roots to compare results
results <- left_join(results, expected, by = "function")
# Compute error (if expected_root is not NA)
results <- results %>%
mutate(error = ifelse(!is.na(expected_root), abs(root - expected_root), NA))
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Read in the CSV files
ga_data <- read_csv("ga_results.csv")            # columns: function, root, iterations, time_ms
bisection_data <- read_csv("bisection_results.csv")
newton_data <- read_csv("newton_results.csv")
# Read the expected roots file
expected <- read_csv("expected_roots.csv")       # columns: function, expected_root
# Add a method column to each dataset
ga_data <- ga_data %>% mutate(Method = "GA")
bisection_data <- bisection_data %>% mutate(Method = "Bisection")
# Handle `-∞` in the newton_data root column
newton_data <- newton_data %>%
mutate(root = ifelse(root == "-∞", -Inf, as.numeric(root))) %>%
mutate(Method = "Newton-Raphson")
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
# Join with the expected roots to compare results
results <- left_join(results, expected, by = "function")
# Compute error (if expected_root is not NA)
results <- results %>%
mutate(error = ifelse(!is.na(expected_root), abs(root - expected_root), NA))
rlang::last_trace()
rlang::last_trace(drop = FALSE)
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Read in the CSV files
ga_data <- read_csv("ga_results.csv") %>%
mutate(root = as.numeric(root))  # Ensure `root` is numeric
bisection_data <- read_csv("bisection_results.csv") %>%
mutate(root = as.numeric(root))  # Ensure `root` is numeric
newton_data <- read_csv("newton_results.csv") %>%
mutate(root = ifelse(root == "-∞", -Inf, as.numeric(root)))  # Handle `-∞` and convert to numeric
# Read the expected roots file and ensure `expected_root` is numeric
expected <- read_csv("expected_roots.csv") %>%
mutate(expected_root = as.numeric(expected_root))  # Convert to numeric
# Add a method column to each dataset
ga_data <- ga_data %>% mutate(Method = "GA")
bisection_data <- bisection_data %>% mutate(Method = "Bisection")
newton_data <- newton_data %>% mutate(Method = "Newton-Raphson")
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
# Join with the expected roots to compare results
results <- left_join(results, expected, by = "function")
# Compute error (if expected_root is not NA)
results <- results %>%
mutate(error = ifelse(!is.na(expected_root), abs(root - expected_root), NA))
# 1. Plot absolute error by method and function
ggplot(results, aes(x = function, y = error, fill = Method)) +
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Read in the CSV files
ga_data <- read_csv("ga_results.csv")            # columns: function, root, iterations, time_ms
bisection_data <- read_csv("bisection_results.csv")
newton_data <- read_csv("newton_results.csv")
# Read the expected roots file
expected <- read_csv("expected_roots.csv")       # columns: function, expected_root
# Add a method column to each dataset
ga_data <- ga_data %>% mutate(Method = "GA")
bisection_data <- bisection_data %>% mutate(Method = "Bisection")
newton_data <- newton_data %>% mutate(Method = "Newton-Raphson")
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
# Join with the expected roots to compare results
results <- left_join(results, expected, by = "function")
# Compute error (if expected_root is not NA)
results <- results %>%
mutate(error = ifelse(!is.na(expected_root), abs(root - expected_root), NA))
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Read in the CSV files
ga_data <- read_csv("ga_results.csv")            # columns: function, root, iterations, time_ms
bisection_data <- read_csv("bisection_results.csv")
newton_data <- read_csv("newton_results.csv")
# Read the expected roots file
expected <- read_csv("expected_roots.csv")       # columns: function, expected_root
# Add a method column to each dataset
ga_data <- ga_data %>% mutate(Method = "GA")
bisection_data <- bisection_data %>% mutate(Method = "Bisection")
newton_data <- newton_data %>% mutate(Method = "Newton-Raphson")
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
# Join with the expected roots to compare results
results <- left_join(results, expected, by = "function")
# Compute error (if expected_root is not NA)
results <- results %>%
mutate(error = ifelse(!is.na(expected_root), abs(root - expected_root), NA))
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Read in the CSV files
ga_data <- read_csv("ga_results.csv") %>%
mutate(root = as.numeric(root))  # Ensure `root` is numeric
bisection_data <- read_csv("bisection_results.csv") %>%
mutate(root = as.numeric(root))  # Ensure `root` is numeric
newton_data <- read_csv("newton_results.csv") %>%
mutate(root = ifelse(root == "-∞", -Inf, as.numeric(root)))  # Handle `-∞` and convert to numeric
# Read the expected roots file and ensure `expected_root` is numeric
expected <- read_csv("expected_roots.csv") %>%
mutate(expected_root = as.numeric(expected_root))  # Convert to numeric
# Add a method column to each dataset
ga_data <- ga_data %>% mutate(Method = "GA")
bisection_data <- bisection_data %>% mutate(Method = "Bisection")
newton_data <- newton_data %>% mutate(Method = "Newton-Raphson")
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
# Join with the expected roots to compare results
results <- left_join(results, expected, by = "function")
# Compute error (if expected_root is not NA)
results <- results %>%
mutate(error = ifelse(!is.na(expected_root), abs(root - expected_root), NA))
# 1. Plot absolute error by method and function
ggplot(results, aes(x = function, y = error, fill = Method)) +
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Helper function to clean and process root columns
clean_root_column <- function(data, root_col_name = "root") {
data %>%
mutate(!!root_col_name := ifelse(
!!sym(root_col_name) == "-∞", -Inf, as.numeric(!!sym(root_col_name))
))
}
# Read and process the CSV files
ga_data <- read_csv("ga_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "GA")
bisection_data <- read_csv("bisection_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "Bisection")
newton_data <- read_csv("newton_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "Newton-Raphson")
# Read and process the expected roots file
expected <- read_csv("expected_roots.csv", show_col_types = FALSE) %>%
mutate(expected_root = ifelse(expected_root == "-∞", -Inf, as.numeric(expected_root)))
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
# Join with the expected roots to compare results
results <- left_join(results, expected, by = "function")
# Compute error (if expected_root is not NA)
results <- results %>%
mutate(error = ifelse(!is.na(expected_root), abs(root - expected_root), NA))
# 1. Plot absolute error by method and function
ggplot(results, aes(x = function, y = error, fill = Method)) +
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Helper function to clean and process root columns
clean_root_column <- function(data, root_col_name = "root") {
data %>%
mutate(!!sym(root_col_name) := ifelse(
!!sym(root_col_name) == "-∞", -Inf, as.numeric(!!sym(root_col_name))
))
}
# Read and process the CSV files
ga_data <- read_csv("ga_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "GA")
bisection_data <- read_csv("bisection_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "Bisection")
newton_data <- read_csv("newton_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "Newton-Raphson")
# Read and process the expected roots file
expected <- read_csv("expected_roots.csv", show_col_types = FALSE) %>%
mutate(expected_root = ifelse(expected_root == "-∞", -Inf, as.numeric(expected_root)))
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
# Join with the expected roots to compare results
results <- left_join(results, expected, by = "function")
# Compute error (if expected_root is not NA)
results <- results %>%
mutate(error = ifelse(!is.na(expected_root), abs(root - expected_root), NA))
# 1. Plot absolute error by method and function
ggplot(results, aes(x = function, y = error, fill = Method)) +
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Helper function to clean and process root columns
clean_root_column <- function(data, root_col_name = "root") {
data %>%
mutate(!!sym(root_col_name) := ifelse(
!!sym(root_col_name) == "-∞", -Inf, as.numeric(!!sym(root_col_name))
))
}
# Read and process the CSV files
ga_data <- read_csv("ga_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "GA")
bisection_data <- read_csv("bisection_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "Bisection")
newton_data <- read_csv("newton_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "Newton-Raphson")
# Read and process the expected roots file
expected <- read_csv("expected_roots.csv", show_col_types = FALSE) %>%
mutate(expected_root = ifelse(expected_root == "-∞", -Inf, as.numeric(expected_root)))
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
# Join with the expected roots to compare results
results <- left_join(results, expected, by = "function")
# Compute error (if expected_root is not NA)
results <- results %>%
mutate(error = ifelse(!is.na(expected_root), abs(root - expected_root), NA))
# 1. Plot absolute error by method and function
ggplot(results, aes(x = function, y = error, fill = Method)) +
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Helper function to clean and process root columns
clean_root_column <- function(data, root_col_name = "root") {
data %>%
mutate(!!sym(root_col_name) := ifelse(
!!sym(root_col_name) == "-∞", -Inf, as.numeric(!!sym(root_col_name))
))
}
# Read and process the CSV files
ga_data <- read_csv("ga_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "GA")
bisection_data <- read_csv("bisection_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "Bisection")
newton_data <- read_csv("newton_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "Newton-Raphson")
# Read and process the expected roots file
expected <- read_csv("expected_roots.csv", show_col_types = FALSE) %>%
mutate(expected_root = ifelse(expected_root == "-∞", -Inf, as.numeric(expected_root)))
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
# Join with the expected roots to compare results
results <- left_join(results, expected, by = "function")
# Compute error (if expected_root is not NA)
results <- results %>%
mutate(error = ifelse(!is.na(expected_root), abs(root - expected_root), NA))
# 1. Plot absolute error by method and function
ggplot(results, aes(x = function, y = error, fill = Method)) +
print(newton_data)
print(expected)
str(results)
summary(results)
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Helper function to clean and process root columns
clean_root_column <- function(data, root_col_name = "root") {
data %>%
mutate(!!sym(root_col_name) := ifelse(
!!sym(root_col_name) == "-∞", -Inf, as.numeric(!!sym(root_col_name))
))
}
# Read and process the CSV files
ga_data <- read_csv("ga_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "GA")
bisection_data <- read_csv("bisection_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "Bisection")
newton_data <- read_csv("newton_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "Newton-Raphson")
# Read and process the expected roots file
expected <- read_csv("expected_roots.csv", show_col_types = FALSE) %>%
mutate(expected_root = ifelse(expected_root == "-∞", -Inf, as.numeric(expected_root)))
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
# Join with the expected roots to compare results
results <- left_join(results, expected, by = "function")
# Compute error (if expected_root is not NA)
results <- results %>%
mutate(error = ifelse(!is.na(expected_root), abs(root - expected_root), NA))
# 1. Plot absolute error by method and function
ggplot(results, aes(x = function, y = error, fill = Method)) +
# Install packages if not already installed
# install.packages("dplyr")
# install.packages("readr")
# install.packages("ggplot2")
library(dplyr)
library(readr)
library(ggplot2)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Helper function to clean and process root columns
clean_root_column <- function(data, root_col_name = "root") {
data %>%
mutate(
!!sym(root_col_name) := as.numeric(gsub("e\\+1", "e1", !!sym(root_col_name))),
!!sym(root_col_name) := ifelse(!!sym(root_col_name) == "-∞", -Inf, !!sym(root_col_name))
)
}
# Read and process the CSV files
ga_data <- read_csv("ga_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "GA")
bisection_data <- read_csv("bisection_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "Bisection")
newton_data <- read_csv("newton_results.csv", show_col_types = FALSE) %>%
clean_root_column() %>%
mutate(Method = "Newton-Raphson")
# Read and process the expected roots file
expected <- read_csv("expected_roots.csv", show_col_types = FALSE) %>%
mutate(
expected_root = as.numeric(gsub("e\\+1", "e1", expected_root)),
expected_root = ifelse(expected_root == "-∞", -Inf, expected_root)
)
# Combine all results into a single dataframe
results <- bind_rows(ga_data, bisection_data, newton_data)
# Join with the expected roots to compare results
results <- left_join(results, expected, by = "function")
# Compute error (if expected_root is not NA)
results <- results %>%
mutate(error = ifelse(!is.na(expected_root), abs(root - expected_root), NA))
# Filter out rows with NA in error for plotting
filtered_results <- results %>% filter(!is.na(error))
# 1. Plot absolute error by method and function
ggplot(filtered_results, aes(x = function, y = error, fill = Method)) +
# Load required libraries
library(dplyr)
library(ggplot2)
library(readr)
# Set working directory
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
# Read in the data
expected <- read_csv("expected_roots.csv")        # Columns: function, expected_root
newton <- read_csv("newton_results.csv")          # Columns: function,root,iterations,time_ms
ga <- read_csv("ga_results.csv")                  # Columns: function,root,iterations,time_ms
bisection <- read_csv("bisection_results.csv")    # Columns: function,root,iterations,time_ms
# Rename "root" column to "actual_root" for clarity
newton <- newton %>% rename(actual_root = root)
ga <- ga %>% rename(actual_root = root)
bisection <- bisection %>% rename(actual_root = root)
# Merge with expected roots
merged_newton <- newton %>% left_join(expected, by = "function")
merged_ga <- ga %>% left_join(expected, by = "function")
merged_bisection <- bisection %>% left_join(expected, by = "function")
# Add a column for method
merged_newton$method <- "Newton"
merged_ga$method <- "GA"
merged_bisection$method <- "Bisection"
# Combine all into one data frame
combined <- bind_rows(merged_newton, merged_ga, merged_bisection)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
library(dplyr)
library(ggplot2)
library(readr)
setwd("C:/Users/kettn/Documents/CS5600/FinalReport/RootSolvingMethod/RootSolvingMethod/bin/Debug/net6.0")
expected <- read_csv("expected_roots.csv")
newton <- read_csv("newton_results.csv")
ga <- read_csv("ga_results.csv")
bisection <- read_csv("bisection_results.csv")
# Rename and clean data
newton <- newton %>%
rename(actual_root = root) %>%
mutate(actual_root = if_else(actual_root %in% c("N/A", "∞", "-∞"), NA_character_, actual_root),
actual_root = as.numeric(actual_root))
ga <- ga %>%
rename(actual_root = root) %>%
mutate(actual_root = if_else(actual_root %in% c("N/A", "∞", "-∞"), NA_character_, actual_root),
actual_root = as.numeric(actual_root))
